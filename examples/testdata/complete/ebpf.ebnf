controlFlowGraph= basicBlock ;

basicBlock= (instruction, '\n')+, exitInstruction;

instruction= arithmeticAndJump | loadAndStore;

arithmeticAndJump = arithmeticInstruction;

arithmeticInstruction =
    addInstruction
    | subInstruction
    | mulInstruction
    | divInstruction
    | sdivInstruction
    | orInstruction
    | andInstruction
    | lshInstruction
    | rshInstruction
    | negInstruction
    | modInstruction
    | smodInstruction
    | xorInstruction
    | movInstruction
    | movsxInstruction
    | arshInstruction
    | endInstruction
    ;

addInstruction = (BPF_ADD, source, aluInsClass), src, dst, '0x0:16', imm;
subInstruction = (BPF_SUB, source, aluInsClass), src, dst, '0x0:16', imm;
mulInstruction = (BPF_MUL, source, aluInsClass), src, dst, '0x0:16', imm;
divInstruction = (BPF_DIV, source, aluInsClass), src, dst, '0x0:16', imm;
sdivInstruction = (BPF_SDIV, source, aluInsClass), src, dst, '0x1:16', imm;
orInstruction = (BPF_OR, source, aluInsClass), src, dst, '0x0:16', imm;
andInstruction = (BPF_AND, source, aluInsClass), src, dst, '0x0:16', imm;
lshInstruction = (BPF_LSH, source, aluInsClass), src, dst, '0x0:16', imm;
rshInstruction = (BPF_RSH, source, aluInsClass), src, dst, '0x0:16', imm;
negInstruction = (BPF_NEG, source, aluInsClass), src, dst, '0x0:16', imm;
modInstruction = (BPF_MOD, source, aluInsClass), src, dst, '0x0:16', imm;
smodInstruction = (BPF_SMOD, source, aluInsClass), src, dst, '0x1:16', imm;
xorInstruction = (BPF_XOR, source, aluInsClass), src, dst, '0x0:16', imm;
movInstruction = (BPF_MOV, source, aluInsClass), src, dst, '0x0:16', imm;
movsxInstruction = (BPF_MOVSX, source, aluInsClass), src, dst, movsxOffset, imm;
arshInstruction = (BPF_ARSH, source, aluInsClass), src, dst, '0x0:16', imm;
endInstruction = (BPF_END, swapsource, aluInsClass), src, dst, '0x0:16', imm;

movsxOffset= '0x8:16'| '0x10:16' | '0x100:16';

jumpInstruction=
    jaInstruction
    | jeqInstruction
    | jgtInstruction
    | jgeInstruction
    | jsetInstruction
    | jneInstruction
    | jsgtInstruction
    | jsgeInstruction
    | callInstruction
    | exitInstruction
    | jltInstruction
    | jleInstruction
    | jsltInstruction
    | jsleInstruction
    ;

jaInstruction=
    (BPF_JA, source, BPF_JMP, '0x0:4', dst, offset, imm)
    | (BPF_JA, source, BPF_JMP32, '0x0:4', dst, offset, imm)
    ;

jeqInstruction = ((BPF_JEQ, source, jmpInsClass), src, dst, offset, imm);
jgtInstruction = ((BPF_JGT, source, jmpInsClass), src, dst, offset, imm);
jgeInstruction = ((BPF_JGE, source, jmpInsClass), src, dst, offset, imm);
jsetInstruction = ((BPF_JSET, source, jmpInsClass), src, dst, offset, imm);
jneInstruction = ((BPF_JNE, source, jmpInsClass), src, dst, offset, imm);
jsgtInstruction = ((BPF_JSGT, source, jmpInsClass), src, dst, offset, imm);
jsgeInstruction = ((BPF_JSGE, source, jmpInsClass), src, dst, offset, imm);
callInstruction=
    (BPF_CALL, source, jmpInsClass, '0x0:4', dst, offset, imm)
    | (BPF_CALL, source, jmpInsClass, '0x1:4', dst, offset, imm)
    | (BPF_CALL, source, jmpInsClass, '0x2:4', dst, offset, imm)
    ;

exitInstruction = ((BPF_EXIT, source, jmpInsClass), '0x0:4', dst, offset, imm);
jltInstruction = ((BPF_JLT, source, jmpInsClass), src, dst, offset, imm);
jleInstruction = ((BPF_JLE, source, jmpInsClass), src, dst, offset, imm);
jsltInstruction = ((BPF_JSLT, source, jmpInsClass), src, dst, offset, imm);
jsleInstruction = ((BPF_JSLE, source, jmpInsClass), src, dst, offset, imm);


loadAndStore=
    regularLoadAndStore
    | atomicOperations
    | signExtensionLoadOperations
    | imm64bitOperations;

regularLoadAndStore= (BPF_MEM, size, ldstClass), src, dst, offset, imm;
signExtensionLoadOperations= (BPF_MEMSX, size, ldInsClass), src, dst, offset, imm;
atomicOperations= ((BPF_ATOMIC, BPF_W, BPF_STX), src, dst, offset, atomicImmChoice)
    | ((BPF_ATOMIC, BPF_DW, BPF_STX), src, dst, offset, atomicImmChoice)
    ;
imm64bitOperations= (BPF_IMM, BPF_DW, BPF_LD), immsrc, dst, offset, imm;

immsrc= '0x0:4' | '0x1:4' | '0x2:4' | '0x3:4' | '0x4:4' | '0x5:4' | '0x6:4';

atomicImmChoice=  '0x00:32' | '0x40:32' | '0x50:32' | '0xa0:32' | '0x01:32' | '0xe1:32' | '0xf1:32';

size= BPF_W
    | BPF_H
    | BPF_B
    | BPF_DW;

aluInsClass= BPF_ALU | BPF_ALU64;
jmpInsClass= BPF_JMP32 | BPF_JMP;
ldstClass= ldInsClass | stInsClass;
ldInsClass= BPF_LD | BPF_LDX;
stInsClass= BPF_ST | BPF_STX;

source = BPF_K | BPF_X;
swapsource= BPF_TO_LE | BPF_TO_BE | Reserved;


src= reg;

dst= reg
    ;

offset = 'offsethook'
    ;

imm= 'immhook'
    ;

reg = '0x0:4' |  '0x1:4'  | '0x2:4'| '0x3:4'| '0x4:4'| '0x5:4'| '0x6:4'| '0x7:4' | '0x8:4' | '0x9:4' | '0xd:4';

BPF_ADD = '0x0:4';
BPF_SUB = '0x1:4';
BPF_MUL = '0x2:4';
BPF_DIV = '0x3:4';
BPF_SDIV = '0x3:4';
BPF_OR = '0x4:4';
BPF_AND = '0x5:4';
BPF_LSH = '0x6:4';
BPF_RSH = '0x7:4';
BPF_NEG = '0x8:4';
BPF_MOD = '0x9:4';
BPF_SMOD = '0x9:4';
BPF_XOR = '0xa:4';
BPF_MOV = '0xb:4';
BPF_MOVSX = '0xb:4';
BPF_ARSH =  '0xc:4';
BPF_END =  '0xd:4';

BPF_JA = '0x0:4';
BPF_JEQ = '0x1:4';
BPF_JGT = '0x2:4';
BPF_JGE = '0x3:4';
BPF_JSET = '0x4:4';
BPF_JNE = '0x5:4';
BPF_JSGT = '0x6:4';
BPF_JSGE = '0x7:4';
BPF_CALL = '0x8:4';
BPF_EXIT = '0x9:4';
BPF_JLT = '0xa:4';
BPF_JLE = '0xb:4';
BPF_JSLT = '0xc:4';
BPF_JSLE = '0xd:4';

BPF_IMM = '0x0:3';
BPF_ABS = '0x1:3';
BPF_IND = '0x2:3';
BPF_MEM = '0x3:3';
BPF_MEMSX ='0x4:3';
BPF_ATOMIC = '0x6:3';

BPF_W = '0x0:2';
BPF_H = '0x1:2';
BPF_B = '0x2:2';
BPF_DW = '0x3:2';

BPF_ALU = '0x4:3';
BPF_ALU64 = '0x7:3';
BPF_JMP32 = '0x6:3';
BPF_JMP = '0x5:3';
BPF_LD = '0x0:3';
BPF_LDX = '0x1:3';
BPF_ST = '0x2:3';
BPF_STX = '0x3:3';

BPF_K = '0x0:1';
BPF_X = '0x1:1';
BPF_TO_LE = '0x0:1';
BPF_TO_BE = '0x1:1';

Reserved = '0x0:1';
